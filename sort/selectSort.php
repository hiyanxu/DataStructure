<?php
/*
选择排序：
将整个待排序序列分为两部分：有序部分、无序部分
初始时默认整个序列都是无序的。
（1）在无序序列中选择最小的一个，和第一个数字进行交换，保证序列的第一个是最小的；
（2）交换后序列分成了第一个的有序序列、第二个到最后的无序序列，从无序序列中再次选择一个最小的，和整个序列的第二个值交换。
（3）交换后整个序列分为了第一个第二个的有序序列、第三个到最后的无序序列，然后在执行步骤二，以此类推。
（4）知道最后无序序列只剩最后一个的时候，其实该值就是最初始的待排序序列中的最大值，整个序列其实也已经从小到大有序了。
*/
function selectSort($arr){
	$len = count($arr);

	for ($i=0; $i < $len-1; $i++){  //因为当序列中剩下了最后的时候，我们无需再次执行选择排序，则总循环次数为$len-1次
		//寻找无序序列中最大值的下标
		$min_key = 0;
		for ($j=$i; $j < $len; $j++){  //因为要从无序序列中寻找，则无序序列的其实是跟选择排序的次数有关的，当i次选择排序后，就确定了第i个的值，则无序序列从下个开始
			if ($j == $i) {  //无序序列的第一个无序比较，只是保存一个临时值，用于和下个值的比较用
				$tmp = $arr[$j];
				$min_key = $j;
			} else if ($arr[$j] < $tmp){
				$tmp = $arr[$j];
				$min_key = $j;
			}
		}

		//找到最大下标，然后和$i对应的值做交换
		$tmp2 = $arr[$i];
		$arr[$i] = $arr[$min_key];
		$arr[$min_key] = $tmp2;
	}

	return $arr;
}

$arr = [12, 5, 3, 9, 2, 7, 11];
$sort_arr = selectSort($arr);
var_dump($sort_arr);